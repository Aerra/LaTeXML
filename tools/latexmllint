#!/usr/bin/perl -w
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# latexmllint
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use FindBin;
use File::Which qw(which);
use File::Spec::Functions;
use Carp;
# Assume we're in the tools directory of a development version of latexml
#### use lib "$FindBin::RealBin/../blib/lib";
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
my $identity  = 'latexmllint';
my ($help)    = (0);
my $VERBOSITY = 0;
my ($doprecommit, $dotidy, $docritic) = (0, 1, 1);
my $severity = undef;
GetOptions(
  "help"       => \$help,
  "precommit!" => \$doprecommit,
  "tidy!"      => \$dotidy,
  "critic!"    => \$docritic,
  "severity=s" => \$severity,
  "verbose"    => sub { $VERBOSITY++; },
  "quiet"      => sub { $VERBOSITY--; },
) or pod2usage(-message => $identity, -exitval => 1, -verbose => 0, -output => \*STDERR);
pod2usage(-message => $identity, -exitval => 1, -verbose => 2, -output => \*STDOUT) if $help;

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
my $REQ_SEVERITY = 4;                 # Critic conformance required for commit
my $DEF_SEVERITY = 3;                 # preferred level of conformance
my @LINTPATHS    = (qw(lib tools));

my $LATEXMLDIR = catfile($FindBin::RealBin, updir());    # Assumes we're in tools subdir
my $TOOLDIR = $FindBin::RealBin;
my @FILES = expand_files((@ARGV ? @ARGV : map { catfile($LATEXMLDIR, $_) } @LINTPATHS));

if (!defined $severity) {                                # Default severity, if none requested
  $severity = ($doprecommit ? $REQ_SEVERITY : $DEF_SEVERITY); }

my $PERLTIDY;
my $PERLCRITIC;
my $perltidy_profile   = '--profile=' . catfile($TOOLDIR, 'latexml.perltidy');
my $perlcritic_profile = '--profile=' . catfile($TOOLDIR, 'latexml.perlcritic');

my $exitstatus = 0;
my ($ntotal, $ntidy, $ncritic) = (0, 0, 0);

foreach my $file (@FILES) {
  $ntotal++;
  my %class = classify($file);
  if ($class{perl} && $dotidy) {
    if (!$PERLTIDY && !($PERLTIDY = which('perltidy'))) {    # Look for perltidy exec.
      $dotidy = 0;                                           # Disable
      print STDERR "No perltidy was found; skipping tidy phase.\n"; }
    else {
      print "Checking $file formatting..." if $VERBOSITY > 0;
      system($PERLTIDY, $perltidy_profile, "-o=$file.tdy", $file) == 0
        or croak "Couldn't run $PERLTIDY on $file: $!";
      my $diffs = length(`diff $file $file.tdy`);
      if (!$diffs) {    # No diffs after formatting? No formatting needed.
        print " formatting is OK.\n" if $VERBOSITY > 0;
        unlink "$file.tdy"; }
      elsif ($doprecommit) {    # Else have differences; Are we just reporting it?
        $exitstatus = 1;
        $ntidy++;
        print "\n" . $file . ' ' if $VERBOSITY == 0;
        print " needs reformatting.\n" if $VERBOSITY > -1;
        unlink "$file.tdy"; }
      else {                    # Or are we going to apply the reformatting?
        $ntidy++;
        rename $file, $file . ".bak";
        rename $file . ".tdy", $file;
        print "Reformatted $file.\n" if $VERBOSITY > -1; } } }
  if ($class{perl} && $docritic) {
    if (!$PERLCRITIC && !($PERLCRITIC = which('perlcritic'))) {
      $docritic = 0;            # Disable
      print STDERR "No perlcritic was found; skipping critic phase.\n"; }
    else {
      print "Checking $file policy..." if $VERBOSITY > 0;
      # Use backticks, since otherwise can't manage the output...
      my $critique = `$PERLCRITIC $perlcritic_profile --severity=$severity --quiet $file`;
      if ($critique eq "") {    # No errors and no policy violations
        print " conformance is OK.\n" if $VERBOSITY > 0; }
      elsif ($critique) {       # Policy violations
        $ncritic++;
        print "\n" . $file . ' ' if $VERBOSITY == 0;
        print " has policy issues\n" if $VERBOSITY > -1;
        print $critique if !$doprecommit && $VERBOSITY > -1; }
      else {                    # Run error
        croak "Couldn't run $PERLCRITIC on $file: $!"; } } }
}

print "Examined $ntotal file(s): $ntidy "
  . ($doprecommit ? "need reformatting" : "were reformatted")
  . "; $ncritic files need code revision."
  . ($doprecommit && ($ncritic || $ntidy) ? " Run tools/latexmllint on offending files." : '')
  . "\n"
  if ($VERBOSITY > -1);
print "Note: only policies with severity >= $REQ_SEVERITY inhibit a commit.\n"
  if !$doprecommit && $ncritic && ($severity < $REQ_SEVERITY) && ($VERBOSITY > -1);
exit($exitstatus);

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Possibilities here:
#   language: perl,css, xslt, javascript
#   program, module, binding...
sub classify {
  my ($file) = @_;
  if ($file =~ /^latexml[a-zA-Z]*$/) {    # No /i
    return (perl => 1, program => 1); }
  elsif ($file =~ /\.(?:pl)$/i) {
    return (perl => 1, program => 1); }
  elsif ($file =~ /\.(?:pm)$/i) {
    return (perl => 1, module => 1); }
  elsif ($file =~ /\.(?:ltxml|latexml)$/i) {
    return (perl => 1, binding => 1); }
  elsif ($file =~ /\.(?:css)$/i) {
    return (css => 1); }
  elsif ($file =~ /\.(?:js)$/i) {
    return (javascript => 1); }
  elsif ($file =~ /\.(?:xsl)$/i) {
    return (xslt => 1); }
  elsif (my $type = `file -b $file`) {
    if ($type =~ /^Perl script/) {
      return (perl => 1, program => 1); } }
  return (); }

my @perlfiles = grep { /(latexml[a-zA-Z]*$)|(\.(pl|pm|ltxml))$/i } @FILES;
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sub expand_files {
  my (@stuff) = @_;
  return map { expand_file($_) } @stuff; }

sub expand_file {
  my ($file) = @_;
  if (-d $file) {
    my $DIR;
    opendir($DIR, $file);
    my @files = grep { /^[^\.]/ } readdir($DIR);
    closedir($DIR);
    return map { expand_file(catfile($file, $_)) } @files; }
  else {
    return ($file); } }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

__END__

=head NAME

C<latexmllint> I<options> I<files> ...

=head1 SYNOPSIS


A tool for establish consistent coding standards for LaTeXML.
Code formatting is implemented by C<perltidy>,  using a prefered set of formatting rules.
Coding standards is checked by C<perlcritic>, again, using
a prefered set of Policies.

Options:

  --precommit checks for minimal conformance, but doesn't modify the file.

=cut
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
